/home/mp/Documents/edu/dtu/master/3-sem/02242_program-analysis/week4/week4.fsproj : warning NU1608: Detected package version outside of dependency constraint: FsLexYacc 9.0.2 requires FSharp.Core (>= 4.3.4 && < 4.4.0) but version FSharp.Core 4.5.2 was resolved.
/home/mp/Documents/edu/dtu/master/3-sem/02242_program-analysis/week4/week4.fsproj : warning NU1608: Detected package version outside of dependency constraint: FsLexYacc 9.0.2 requires FSharp.Core (>= 4.3.4 && < 4.4.0) but version FSharp.Core 4.5.2 was resolved.
RD WITH FIFO

execution of examples/test2.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, x := 2 * 2, 4)
(4, R := (1, -10), 5)
(6, R.fst := x, 7)
(7, x := R.snd, 9)
(8, R.snd := 15, 9)
(5, x == 4, 6)
(5, !x == 4, 8)
(9, x := 5, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "x := 2 * 2;"]
q_4 -> q_5 [label = "R := (1, -10);"]
q_6 -> q_7 [label = "R.fst := x;"]
q_7 -> q_9 [label = "x := R.snd;"]
q_8 -> q_9 [label = "R.snd := 15;"]
q_5 -> q_6 [label = "x == 4;"]
q_5 -> q_8 [label = "!x == 4;"]
q_9 -> q_10 [label = "x := 5;"]
}
steps: 22
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 3, 4); ]
5 - A [(Some 2, 3); R.fst [(Some 4, 5); R.snd [(Some 4, 5); x [(Some 3, 4); ]
6 - A [(Some 2, 3); R.fst [(Some 4, 5); R.snd [(Some 4, 5); x [(Some 3, 4); ]
7 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 4, 5); x [(Some 3, 4); ]
8 - A [(Some 2, 3); R.fst [(Some 4, 5); R.snd [(Some 4, 5); x [(Some 3, 4); ]
9 - A [(Some 2, 3); R.fst [(Some 4, 5); (Some 6, 7); R.snd [(Some 4, 5); (Some 8, 9); x [(Some 3, 4); (Some 7, 9); ]
10 - A [(Some 2, 3); R.fst [(Some 4, 5); (Some 6, 7); R.snd [(Some 4, 5); (Some 8, 9); x [(Some 9, 10); ]

execution of examples/simple.mc:
ProgramGraph:
qs: 0, qe: 14
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, int y, 4)
(4, int z, 5)
(5, x := 2 * 2, 6)
(6, R := (1, -10), 7)
(7, x := 3, 8)
(8, x := -3, 9)
(9, x := R.fst, 10)
(10, A[1] := 3, 11)
(11, A[1] := x, 12)
(12, A[x] := 3, 13)
(13, A[x] := x, 14)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_14;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "int y;"]
q_4 -> q_5 [label = "int z;"]
q_5 -> q_6 [label = "x := 2 * 2;"]
q_6 -> q_7 [label = "R := (1, -10);"]
q_7 -> q_8 [label = "x := 3;"]
q_8 -> q_9 [label = "x := -3;"]
q_9 -> q_10 [label = "x := R.fst;"]
q_10 -> q_11 [label = "A[1] := 3;"]
q_11 -> q_12 [label = "A[1] := x;"]
q_12 -> q_13 [label = "A[x] := 3;"]
q_13 -> q_14 [label = "A[x] := x;"]
}
steps: 29
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); y [(None, 0); z [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); y [(None, 0); z [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(None, 0); z [(None, 0); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(None, 0); z [(None, 0); ]
4 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(Some 3, 4); z [(None, 0); ]
5 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(Some 3, 4); z [(Some 4, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 5, 6); y [(Some 3, 4); z [(Some 4, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 5, 6); y [(Some 3, 4); z [(Some 4, 5); ]
8 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 7, 8); y [(Some 3, 4); z [(Some 4, 5); ]
9 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 8, 9); y [(Some 3, 4); z [(Some 4, 5); ]
10 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
11 - A [(Some 2, 3); (Some 10, 11); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
12 - A [(Some 2, 3); (Some 10, 11); (Some 11, 12); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
13 - A [(Some 2, 3); (Some 10, 11); (Some 11, 12); (Some 12, 13); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
14 - A [(Some 2, 3); (Some 10, 11); (Some 11, 12); (Some 12, 13); (Some 13, 14); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]

execution of examples/if.mc:
ProgramGraph:
qs: 0, qe: 9
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, read x, 7)
(5, !x == 1, 7)
(5, x == 1, 6)
(8, A[1] := -2, 9)
(7, !x > 1, 9)
(7, x > 1, 8)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_9;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "read x;"]
q_5 -> q_7 [label = "!x == 1;"]
q_5 -> q_6 [label = "x == 1;"]
q_8 -> q_9 [label = "A[1] := -2;"]
q_7 -> q_9 [label = "!x > 1;"]
q_7 -> q_8 [label = "x > 1;"]
}
steps: 21
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); (Some 6, 7); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); (Some 6, 7); ]
9 - A [(Some 2, 3); (Some 8, 9); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); (Some 6, 7); ]

execution of examples/ifelse.mc:
ProgramGraph:
qs: 0, qe: 11
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, A[1] := 2, 8)
(7, A[1] := -2, 8)
(5, x == 1, 6)
(5, !x == 1, 7)
(9, A[2] := 2, 11)
(10, A[2] := -2, 11)
(8, x > 1, 9)
(8, !x > 1, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_11;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_8 [label = "A[1] := 2;"]
q_7 -> q_8 [label = "A[1] := -2;"]
q_5 -> q_6 [label = "x == 1;"]
q_5 -> q_7 [label = "!x == 1;"]
q_9 -> q_11 [label = "A[2] := 2;"]
q_10 -> q_11 [label = "A[2] := -2;"]
q_8 -> q_9 [label = "x > 1;"]
q_8 -> q_10 [label = "!x > 1;"]
}
steps: 25
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
8 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
9 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
10 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
11 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); (Some 9, 11); (Some 10, 11); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]

execution of examples/loop.mc:
ProgramGraph:
qs: 0, qe: 8
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := R.fst, 5)
(6, R.snd := R.snd + 1, 7)
(7, x := x - 1, 5)
(5, !x > R.snd, 8)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_8;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "R.snd := R.snd + 1;"]
q_7 -> q_5 [label = "x := x - 1;"]
q_5 -> q_8 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 21
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]

execution of examples/nested.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 32
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
9 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
10 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]

execution of examples/nestedloops.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 32
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
9 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
10 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
RD WITH LIFO

execution of examples/test2.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, x := 2 * 2, 4)
(4, R := (1, -10), 5)
(6, R.fst := x, 7)
(7, x := R.snd, 9)
(8, R.snd := 15, 9)
(5, x == 4, 6)
(5, !x == 4, 8)
(9, x := 5, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "x := 2 * 2;"]
q_4 -> q_5 [label = "R := (1, -10);"]
q_6 -> q_7 [label = "R.fst := x;"]
q_7 -> q_9 [label = "x := R.snd;"]
q_8 -> q_9 [label = "R.snd := 15;"]
q_5 -> q_6 [label = "x == 4;"]
q_5 -> q_8 [label = "!x == 4;"]
q_9 -> q_10 [label = "x := 5;"]
}
steps: 46
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 3, 4); ]
5 - A [(Some 2, 3); R.fst [(Some 4, 5); R.snd [(Some 4, 5); x [(Some 3, 4); ]
6 - A [(Some 2, 3); R.fst [(Some 4, 5); R.snd [(Some 4, 5); x [(Some 3, 4); ]
7 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 4, 5); x [(Some 3, 4); ]
8 - A [(Some 2, 3); R.fst [(Some 4, 5); R.snd [(Some 4, 5); x [(Some 3, 4); ]
9 - A [(Some 2, 3); R.fst [(Some 4, 5); (Some 6, 7); R.snd [(Some 4, 5); (Some 8, 9); x [(Some 3, 4); (Some 7, 9); ]
10 - A [(Some 2, 3); R.fst [(Some 4, 5); (Some 6, 7); R.snd [(Some 4, 5); (Some 8, 9); x [(Some 9, 10); ]

execution of examples/simple.mc:
ProgramGraph:
qs: 0, qe: 14
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, int y, 4)
(4, int z, 5)
(5, x := 2 * 2, 6)
(6, R := (1, -10), 7)
(7, x := 3, 8)
(8, x := -3, 9)
(9, x := R.fst, 10)
(10, A[1] := 3, 11)
(11, A[1] := x, 12)
(12, A[x] := 3, 13)
(13, A[x] := x, 14)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_14;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "int y;"]
q_4 -> q_5 [label = "int z;"]
q_5 -> q_6 [label = "x := 2 * 2;"]
q_6 -> q_7 [label = "R := (1, -10);"]
q_7 -> q_8 [label = "x := 3;"]
q_8 -> q_9 [label = "x := -3;"]
q_9 -> q_10 [label = "x := R.fst;"]
q_10 -> q_11 [label = "A[1] := 3;"]
q_11 -> q_12 [label = "A[1] := x;"]
q_12 -> q_13 [label = "A[x] := 3;"]
q_13 -> q_14 [label = "A[x] := x;"]
}
steps: 85
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); y [(None, 0); z [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); y [(None, 0); z [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(None, 0); z [(None, 0); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(None, 0); z [(None, 0); ]
4 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(Some 3, 4); z [(None, 0); ]
5 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); y [(Some 3, 4); z [(Some 4, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 5, 6); y [(Some 3, 4); z [(Some 4, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 5, 6); y [(Some 3, 4); z [(Some 4, 5); ]
8 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 7, 8); y [(Some 3, 4); z [(Some 4, 5); ]
9 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 8, 9); y [(Some 3, 4); z [(Some 4, 5); ]
10 - A [(Some 2, 3); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
11 - A [(Some 2, 3); (Some 10, 11); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
12 - A [(Some 2, 3); (Some 10, 11); (Some 11, 12); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
13 - A [(Some 2, 3); (Some 10, 11); (Some 11, 12); (Some 12, 13); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]
14 - A [(Some 2, 3); (Some 10, 11); (Some 11, 12); (Some 12, 13); (Some 13, 14); R.fst [(Some 6, 7); R.snd [(Some 6, 7); x [(Some 9, 10); y [(Some 3, 4); z [(Some 4, 5); ]

execution of examples/if.mc:
ProgramGraph:
qs: 0, qe: 9
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, read x, 7)
(5, !x == 1, 7)
(5, x == 1, 6)
(8, A[1] := -2, 9)
(7, !x > 1, 9)
(7, x > 1, 8)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_9;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "read x;"]
q_5 -> q_7 [label = "!x == 1;"]
q_5 -> q_6 [label = "x == 1;"]
q_8 -> q_9 [label = "A[1] := -2;"]
q_7 -> q_9 [label = "!x > 1;"]
q_7 -> q_8 [label = "x > 1;"]
}
steps: 38
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); (Some 6, 7); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); (Some 6, 7); ]
9 - A [(Some 2, 3); (Some 8, 9); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); (Some 6, 7); ]

execution of examples/ifelse.mc:
ProgramGraph:
qs: 0, qe: 11
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, A[1] := 2, 8)
(7, A[1] := -2, 8)
(5, x == 1, 6)
(5, !x == 1, 7)
(9, A[2] := 2, 11)
(10, A[2] := -2, 11)
(8, x > 1, 9)
(8, !x > 1, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_11;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_8 [label = "A[1] := 2;"]
q_7 -> q_8 [label = "A[1] := -2;"]
q_5 -> q_6 [label = "x == 1;"]
q_5 -> q_7 [label = "!x == 1;"]
q_9 -> q_11 [label = "A[2] := 2;"]
q_10 -> q_11 [label = "A[2] := -2;"]
q_8 -> q_9 [label = "x > 1;"]
q_8 -> q_10 [label = "!x > 1;"]
}
steps: 52
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
8 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
9 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
10 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]
11 - A [(Some 2, 3); (Some 6, 8); (Some 7, 8); (Some 9, 11); (Some 10, 11); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 4, 5); ]

execution of examples/loop.mc:
ProgramGraph:
qs: 0, qe: 8
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := R.fst, 5)
(6, R.snd := R.snd + 1, 7)
(7, x := x - 1, 5)
(5, !x > R.snd, 8)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_8;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "R.snd := R.snd + 1;"]
q_7 -> q_5 [label = "x := x - 1;"]
q_5 -> q_8 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 37
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 6, 7); x [(Some 4, 5); (Some 7, 5); ]

execution of examples/nested.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 50
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
9 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
10 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]

execution of examples/nestedloops.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 50
AnalysisAssigenment:
0 - A [(None, 0); R.fst [(None, 0); R.snd [(None, 0); x [(None, 0); ]
1 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(None, 0); ]
2 - A [(None, 0); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
3 - A [(Some 2, 3); R.fst [(Some 0, 1); R.snd [(Some 0, 1); x [(Some 1, 2); ]
4 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); x [(Some 1, 2); ]
5 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
6 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
7 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
8 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
9 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
10 - A [(Some 2, 3); R.fst [(Some 3, 4); R.snd [(Some 3, 4); (Some 9, 5); x [(Some 4, 5); (Some 8, 7); ]
DS WITH FIFO

execution of examples/test2.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, x := 2 * 2, 4)
(4, R := (1, -10), 5)
(6, R.fst := x, 7)
(7, x := R.snd, 9)
(8, R.snd := 15, 9)
(5, x == 4, 6)
(5, !x == 4, 8)
(9, x := 5, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "x := 2 * 2;"]
q_4 -> q_5 [label = "R := (1, -10);"]
q_6 -> q_7 [label = "R.fst := x;"]
q_7 -> q_9 [label = "x := R.snd;"]
q_8 -> q_9 [label = "R.snd := 15;"]
q_5 -> q_6 [label = "x == 4;"]
q_5 -> q_8 [label = "!x == 4;"]
q_9 -> q_10 [label = "x := 5;"]
}
steps: 22
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Zero; R.snd [Zero; x [Positive; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; Positive; x [Negative; Positive; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; Positive; x [Positive; ]

execution of examples/simple.mc:
ProgramGraph:
qs: 0, qe: 14
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, int y, 4)
(4, int z, 5)
(5, x := 2 * 2, 6)
(6, R := (1, -10), 7)
(7, x := 3, 8)
(8, x := -3, 9)
(9, x := R.fst, 10)
(10, A[1] := 3, 11)
(11, A[1] := x, 12)
(12, A[x] := 3, 13)
(13, A[x] := x, 14)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_14;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "int y;"]
q_4 -> q_5 [label = "int z;"]
q_5 -> q_6 [label = "x := 2 * 2;"]
q_6 -> q_7 [label = "R := (1, -10);"]
q_7 -> q_8 [label = "x := 3;"]
q_8 -> q_9 [label = "x := -3;"]
q_9 -> q_10 [label = "x := R.fst;"]
q_10 -> q_11 [label = "A[1] := 3;"]
q_11 -> q_12 [label = "A[1] := x;"]
q_12 -> q_13 [label = "A[x] := 3;"]
q_13 -> q_14 [label = "A[x] := x;"]
}
steps: 29
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
4 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; y [Zero; z [Negative; Zero; Positive; ]
5 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; y [Zero; z [Zero; ]
6 - A [Zero; R.fst [Zero; R.snd [Zero; x [Positive; y [Zero; z [Zero; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; x [Negative; y [Zero; z [Zero; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
11 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
12 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
13 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
14 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]

execution of examples/if.mc:
ProgramGraph:
qs: 0, qe: 9
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, read x, 7)
(5, !x == 1, 7)
(5, x == 1, 6)
(8, A[1] := -2, 9)
(7, !x > 1, 9)
(7, x > 1, 8)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_9;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "read x;"]
q_5 -> q_7 [label = "!x == 1;"]
q_5 -> q_6 [label = "x == 1;"]
q_8 -> q_9 [label = "A[1] := -2;"]
q_7 -> q_9 [label = "!x > 1;"]
q_7 -> q_8 [label = "x > 1;"]
}
steps: 21
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; x [Negative; Zero; Positive; ]
9 - A [Negative; Zero; R.fst [Positive; R.snd [Negative; x [Negative; Zero; Positive; ]

execution of examples/ifelse.mc:
ProgramGraph:
qs: 0, qe: 11
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, A[1] := 2, 8)
(7, A[1] := -2, 8)
(5, x == 1, 6)
(5, !x == 1, 7)
(9, A[2] := 2, 11)
(10, A[2] := -2, 11)
(8, x > 1, 9)
(8, !x > 1, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_11;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_8 [label = "A[1] := 2;"]
q_7 -> q_8 [label = "A[1] := -2;"]
q_5 -> q_6 [label = "x == 1;"]
q_5 -> q_7 [label = "!x == 1;"]
q_9 -> q_11 [label = "A[2] := 2;"]
q_10 -> q_11 [label = "A[2] := -2;"]
q_8 -> q_9 [label = "x > 1;"]
q_8 -> q_10 [label = "!x > 1;"]
}
steps: 25
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
8 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]
9 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]
10 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]
11 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]

execution of examples/loop.mc:
ProgramGraph:
qs: 0, qe: 8
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := R.fst, 5)
(6, R.snd := R.snd + 1, 7)
(7, x := x - 1, 5)
(5, !x > R.snd, 8)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_8;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "R.snd := R.snd + 1;"]
q_7 -> q_5 [label = "x := x - 1;"]
q_5 -> q_8 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 21
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]

execution of examples/nested.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 32
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]

execution of examples/nestedloops.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 32
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
DS WITH LIFO

execution of examples/test2.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, x := 2 * 2, 4)
(4, R := (1, -10), 5)
(6, R.fst := x, 7)
(7, x := R.snd, 9)
(8, R.snd := 15, 9)
(5, x == 4, 6)
(5, !x == 4, 8)
(9, x := 5, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "x := 2 * 2;"]
q_4 -> q_5 [label = "R := (1, -10);"]
q_6 -> q_7 [label = "R.fst := x;"]
q_7 -> q_9 [label = "x := R.snd;"]
q_8 -> q_9 [label = "R.snd := 15;"]
q_5 -> q_6 [label = "x == 4;"]
q_5 -> q_8 [label = "!x == 4;"]
q_9 -> q_10 [label = "x := 5;"]
}
steps: 23
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Zero; R.snd [Zero; x [Positive; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; Positive; x [Negative; Positive; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; Positive; x [Positive; ]

execution of examples/simple.mc:
ProgramGraph:
qs: 0, qe: 14
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, int y, 4)
(4, int z, 5)
(5, x := 2 * 2, 6)
(6, R := (1, -10), 7)
(7, x := 3, 8)
(8, x := -3, 9)
(9, x := R.fst, 10)
(10, A[1] := 3, 11)
(11, A[1] := x, 12)
(12, A[x] := 3, 13)
(13, A[x] := x, 14)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_14;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "int y;"]
q_4 -> q_5 [label = "int z;"]
q_5 -> q_6 [label = "x := 2 * 2;"]
q_6 -> q_7 [label = "R := (1, -10);"]
q_7 -> q_8 [label = "x := 3;"]
q_8 -> q_9 [label = "x := -3;"]
q_9 -> q_10 [label = "x := R.fst;"]
q_10 -> q_11 [label = "A[1] := 3;"]
q_11 -> q_12 [label = "A[1] := x;"]
q_12 -> q_13 [label = "A[x] := 3;"]
q_13 -> q_14 [label = "A[x] := x;"]
}
steps: 29
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; y [Negative; Zero; Positive; z [Negative; Zero; Positive; ]
4 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; y [Zero; z [Negative; Zero; Positive; ]
5 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; y [Zero; z [Zero; ]
6 - A [Zero; R.fst [Zero; R.snd [Zero; x [Positive; y [Zero; z [Zero; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; x [Negative; y [Zero; z [Zero; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
11 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
12 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
13 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]
14 - A [Positive; R.fst [Positive; R.snd [Negative; x [Positive; y [Zero; z [Zero; ]

execution of examples/if.mc:
ProgramGraph:
qs: 0, qe: 9
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, read x, 7)
(5, !x == 1, 7)
(5, x == 1, 6)
(8, A[1] := -2, 9)
(7, !x > 1, 9)
(7, x > 1, 8)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_9;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "read x;"]
q_5 -> q_7 [label = "!x == 1;"]
q_5 -> q_6 [label = "x == 1;"]
q_8 -> q_9 [label = "A[1] := -2;"]
q_7 -> q_9 [label = "!x > 1;"]
q_7 -> q_8 [label = "x > 1;"]
}
steps: 21
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; x [Negative; Zero; Positive; ]
9 - A [Negative; Zero; R.fst [Positive; R.snd [Negative; x [Negative; Zero; Positive; ]

execution of examples/ifelse.mc:
ProgramGraph:
qs: 0, qe: 11
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (1, -10), 4)
(4, x := R.fst, 5)
(6, A[1] := 2, 8)
(7, A[1] := -2, 8)
(5, x == 1, 6)
(5, !x == 1, 7)
(9, A[2] := 2, 11)
(10, A[2] := -2, 11)
(8, x > 1, 9)
(8, !x > 1, 10)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_11;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (1, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_8 [label = "A[1] := 2;"]
q_7 -> q_8 [label = "A[1] := -2;"]
q_5 -> q_6 [label = "x == 1;"]
q_5 -> q_7 [label = "!x == 1;"]
q_9 -> q_11 [label = "A[2] := 2;"]
q_10 -> q_11 [label = "A[2] := -2;"]
q_8 -> q_9 [label = "x > 1;"]
q_8 -> q_10 [label = "!x > 1;"]
}
steps: 27
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; x [Positive; ]
8 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]
9 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]
10 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]
11 - A [Negative; Positive; R.fst [Positive; R.snd [Negative; x [Positive; ]

execution of examples/loop.mc:
ProgramGraph:
qs: 0, qe: 8
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := R.fst, 5)
(6, R.snd := R.snd + 1, 7)
(7, x := x - 1, 5)
(5, !x > R.snd, 8)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_8;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := R.fst;"]
q_6 -> q_7 [label = "R.snd := R.snd + 1;"]
q_7 -> q_5 [label = "x := x - 1;"]
q_5 -> q_8 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 21
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]

execution of examples/nested.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 31
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]

execution of examples/nestedloops.mc:
ProgramGraph:
qs: 0, qe: 10
(0, {int fst; int snd} R, 1)
(1, int x, 2)
(2, int[5] A, 3)
(3, R := (10, -10), 4)
(4, x := 200, 5)
(8, x := x - 1, 7)
(7, !x > R.fst, 6)
(7, x > R.fst, 8)
(6, !x > 100, 9)
(6, x > 100, 7)
(9, R.snd := R.snd + 1, 5)
(5, !x > R.snd, 10)
(5, x > R.snd, 6)
vizgraph:
digraph program_graph {rankdir=TL;
n0 [label= "", shape=none,height=.0,width=.0] n0 -> q_0;
node [shape = doublecircle]; q_10;
node [shape = circle]
q_0 -> q_1 [label = "{int fst; int snd} R;"]
q_1 -> q_2 [label = "int x;"]
q_2 -> q_3 [label = "int[5] A;"]
q_3 -> q_4 [label = "R := (10, -10);"]
q_4 -> q_5 [label = "x := 200;"]
q_8 -> q_7 [label = "x := x - 1;"]
q_7 -> q_6 [label = "!x > R.fst;"]
q_7 -> q_8 [label = "x > R.fst;"]
q_6 -> q_9 [label = "!x > 100;"]
q_6 -> q_7 [label = "x > 100;"]
q_9 -> q_5 [label = "R.snd := R.snd + 1;"]
q_5 -> q_10 [label = "!x > R.snd;"]
q_5 -> q_6 [label = "x > R.snd;"]
}
steps: 31
AnalysisAssigenment:
0 - A [Negative; Zero; Positive; R.fst [Negative; Zero; Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
1 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Negative; Zero; Positive; ]
2 - A [Negative; Zero; Positive; R.fst [Zero; R.snd [Zero; x [Zero; ]
3 - A [Zero; R.fst [Zero; R.snd [Zero; x [Zero; ]
4 - A [Zero; R.fst [Positive; R.snd [Negative; x [Zero; ]
5 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
6 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
7 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
8 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
9 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
10 - A [Zero; R.fst [Positive; R.snd [Negative; Zero; Positive; x [Negative; Zero; Positive; ]
