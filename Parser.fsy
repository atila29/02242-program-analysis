%{
open AbstractSyntaxTree
%}

%token <int> INT
%token <bool> BOOL
%token <string> STRING
%token <string> NAME
%token ITYP BTYP
%token LP LCP LSP RP RCP RSP
%token IF 
%token COMMA COLON SEMI BAR TO
%token NEG PLUS MINUS TIMES AND EQ LE LT GT GE NEQ
%token READ WRITE
%token EOF


%left AND
%nonassoc NEG
%left EQ LE GE LT GT NEQ
%left PLUS MINUS 
%left TIMES


%start Main Prog 
%type <Stm> Stm
%type <Dec> Dec
%type <Program> Main Prog
%%

Main:
   Prog EOF                            { $1 }

Prog:
    LCP Dec SEMI Stm RCP               { P($2, $4) }


Stm:
  AssignmentL of L * A
| AssignmentR of String * A * A
| Statements of Statement * Statement
| IfStatement of B * Statement
| IfElseStatement of B * Statement * Statement
| WhileStatement of B * Statement
| Read of L
| Write of A

Dec:
    ITYP NAME                         { DeclarationX($2) }            // int x;
  | ITYP LSP INT RSP NAME             { DeclarationA($3, $5) }        // int[5] x;
  | Dec SEMI Dec                      { DeclarationD($1, $3) }

// Stm:
//     WRITE Exp                         { PrintLn $2 }
//   | NAME LP ExpL RP                   { Call($1, $3) }
//   | Access ASG Exp                    { Ass($1,$3)  }
//   | SKIP                              { Do (GC []) }
//   | ABORT                             { Alt (GC []) } 
//   | LCP StmL RCP                      { Block([], $2) }
//   | LCP DecL SEMI StmL RCP            { Block($2, $4) }
//   | IF GuardedCommand FI              { Alt $2 }
//   | DO GuardedCommand OD              { Do $2  }
//   | RETURN Exp                        { Return(Some $2) }
//   | RETURN                            { Return None }

L:
    NAME                             { LabelX($1) }
  | NAME LCP A RCP                   { LabelA($1, $3) }

A:
    INT                              { ArithmeticN($1) }
  | NAME                             { ArithmeticX($1) }
  | NAME LSP INT RSP                 { ArithmeticA($1, $3) }
  | A ArithmeticOperator A           { ROp($1, $2, $3) }

B:
  BOOL                               { BoolValue $1 }
| A RelationalOperator A             { AOp($1, $2, $3) }
| B BooleanOperator B                { BOp($1, $2, $3) }
| NEG B                              { Not $1 }

RelationalOperator:
    LT                               { LessThan }
  | GT                               { GreaterThan }
  | LE                               { LesserOrEqualTo }
  | GE                               { GreaterOrEqualTo }
  | EQ                               { EqualTo }
  | NEQ                              { NotEqualTo }


BooleanOperator:
    AND                             { AndOp }
  | OR                              { OrOp }


ArithmeticOperator:
    Plus                             { Plus }
  | Minus                            { Minus }
  | Multiply                         { Multiply }
  | Divide                           { Divide }




