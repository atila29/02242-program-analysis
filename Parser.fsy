%{
open AbstractSyntaxTree
%}

%token <int> INT
%token <bool> BOOL
%token <string> NAME
%token ITYP BTYP
%token LP LCP LSP RP RCP RSP
%token ELSE
%token IF WHILE
%token COMMA COLON SEMI BAR TO
%token NEG PLUS MINUS TIMES FORWARDSLASH AND OR EQ LE LT GT GE NEQ
%token READ WRITE
%token ASSIGN
%token DOT FST SND
%token EOF

%nonassoc NAME
%left AND OR
%nonassoc NEG
%left EQ LE GE LT GT NEQ
%left PLUS MINUS 
%left TIMES
%left ASSIGN


%start Main Prog
%type <L> L
%type <A> A
%type <B> B
%type <RelationalOperator> RelationalOperator
%type <BooleanOperator> BooleanOperator
%type <ArithmeticOperator> ArithmeticOperator
%type <Statement> Stm
%type <Declaration> Dec
%type <Program> Main Prog
%%


Main:
   Prog EOF                                     { $1 }

Prog:
    LCP Dec Stm RCP                             { Program($2, $3) }


Stm:
    L ASSIGN A SEMI                             { AssignmentL($1, $3) }
  | NAME ASSIGN LP A COMMA A RP SEMI            { AssignmentR($1, $4, $6) }
  | IF LP B RP LCP Stm RCP                      { IfStatement($3, $6) }
  | IF LP B RP LCP Stm RCP ELSE LCP Stm RCP     { IfElseStatement($3, $6, $10) }
  | WHILE LP B RP LCP Stm RCP                   { WhileStatement($3, $6) }
  | READ L SEMI                                 { Read($2) }
  | WRITE A SEMI                                { Write($2) }
  | Stm Stm                                     { Statements($1, $2) }

Dec:
    ITYP NAME SEMI                              { DeclarationX($2) }            // int x;
  | ITYP LSP INT RSP NAME SEMI                  { DeclarationA($5, $3) }        // int[5] x;
  | LCP ITYP FST SEMI ITYP SND RCP NAME SEMI    { DeclarationR($8) }
  | Dec Dec                                     { DeclarationD($1, $2) }

L:
    NAME                                        { LabelX($1) }
  | NAME LSP A RSP                              { LabelA($1, $3) }
  | NAME DOT FST                                { LabelFstR($1) }
  | NAME DOT SND                                { LabelSndR($1) }

A:
    INT                                         { ArithmeticN($1) }
  | NAME                                        { ArithmeticX($1) }     // this can be replaced by L.
  | NAME LSP A RSP                              { ArithmeticA($1, $3) } // ... Same here.
  | NAME DOT FST                                { ArithmeticFstR($1) }
  | NAME DOT SND                                { ArithmeticSndR($1) }
  | A ArithmeticOperator A                      { ROp($1, $2, $3) }

B:
    BOOL                                        { BoolValue $1 }
  | A RelationalOperator A                      { AOp($1, $2, $3) }
  | B BooleanOperator B                         { BOp($1, $2, $3) }
  | NEG B                                       { Not $2 }

RelationalOperator:
    LT                                          { LessThan }
  | GT                                          { GreaterThan }
  | LE                                          { LesserOrEqualTo }
  | GE                                          { GreaterOrEqualTo }
  | EQ                                          { EqualTo }
  | NEQ                                         { NotEqualTo }


BooleanOperator:
    AND                                         { AndOp }
  | OR                                          { OrOp }


ArithmeticOperator:
    PLUS                                        { Plus }
  | MINUS                                       { Minus }
  | TIMES                                       { Multiply }
  | FORWARDSLASH                                { Divide }




