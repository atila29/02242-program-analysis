// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | DOT
  | FST
  | SND
  | ASSIGN
  | READ
  | WRITE
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | FORWARDSLASH
  | AND
  | OR
  | EQ
  | LE
  | LT
  | GT
  | GE
  | NEQ
  | COMMA
  | COLON
  | SEMI
  | BAR
  | TO
  | IF
  | WHILE
  | ELSE
  | LP
  | LCP
  | LSP
  | RP
  | RCP
  | RSP
  | ITYP
  | BTYP
  | NAME of (string)
  | BOOL of (bool)
  | INT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_FST
    | TOKEN_SND
    | TOKEN_ASSIGN
    | TOKEN_READ
    | TOKEN_WRITE
    | TOKEN_NEG
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_FORWARDSLASH
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQ
    | TOKEN_LE
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_NEQ
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMI
    | TOKEN_BAR
    | TOKEN_TO
    | TOKEN_IF
    | TOKEN_WHILE
    | TOKEN_ELSE
    | TOKEN_LP
    | TOKEN_LCP
    | TOKEN_LSP
    | TOKEN_RP
    | TOKEN_RCP
    | TOKEN_RSP
    | TOKEN_ITYP
    | TOKEN_BTYP
    | TOKEN_NAME
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startProg
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_Stm
    | NONTERM_Dec
    | NONTERM_L
    | NONTERM_A
    | NONTERM_B
    | NONTERM_RelationalOperator
    | NONTERM_BooleanOperator
    | NONTERM_ArithmeticOperator
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Program) 
val Prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Program) 
